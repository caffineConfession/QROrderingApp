
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_SECONDARY") // For Prisma Migrate on secondary (if needed)
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id            String        @id @default(cuid())
  name          String        @unique // Name of the base product, e.g., "Vanilla Latte"
  description   String?
  category      ItemCategory // COFFEE or SHAKES
  isAvailable   Boolean       @default(true) // General availability of the product concept
  imageHint     String?       // Hint for AI image generation, e.g., "vanilla coffee latte art"
  imageUrl      String?       // Path to the static image, e.g., /images/products/prod_cff_van.png
  menuItems     MenuItem[]    // Specific serving types, prices, stock for this product
  orderItems    OrderItem[]   // References in past orders
  ratings       ProductRating[] // Ratings for this product
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model MenuItem {
  id            String          @id @default(cuid())
  productId     String
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  servingType   ItemServingType // e.g., Cup, Cone
  price         Float
  stockQuantity Int             @default(0)
  isAvailable   Boolean         @default(true) // Availability of this specific serving variant
  orderItems    OrderItem[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([productId, servingType]) // Ensures a product can't have the same serving type twice
}

model Order {
  id                         String        @id @default(cuid())
  customerName               String?
  customerPhone              String?
  customerEmail              String?
  totalAmount                Float
  items                      OrderItem[]
  status                     OrderStatus   @default(PENDING_PREPARATION)
  paymentMethod              PaymentMethod
  paymentStatus              PaymentStatus @default(PENDING)
  gatewayOrderId             String?       @unique // Razorpay order_id
  gatewayPaymentId           String?       @unique // Razorpay payment_id
  orderSource                OrderSource   @default(CUSTOMER_ONLINE)
  takenById                  String?       // AdminUser email who took/created the order (for STAFF_MANUAL)
  takenBy                    AdminUser?    @relation("TakenByOrders", fields: [takenById], references: [email], onDelete: SetNull, onUpdate: Cascade)
  processedById              String?       // AdminUser email who last processed/updated the order status
  processedBy                AdminUser?    @relation("ProcessedByOrders", fields: [processedById], references: [email], onDelete: SetNull, onUpdate: Cascade)
  experienceRating           ExperienceRating[]
  productRatings             ProductRating[]
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
}

model OrderItem {
  id              String          @id @default(cuid())
  orderId         String
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String          // ID of the base Product
  product         Product         @relation(fields: [productId], references: [id], onDelete: Restrict) // Prevent product deletion if in orders
  menuItemId      String          // ID of the specific MenuItem at time of order
  menuItem        MenuItem        @relation(fields: [menuItemId], references: [id], onDelete: Restrict) // Prevent menuitem deletion if in orders
  productName     String          // Denormalized for history
  category        ItemCategory    // Denormalized
  servingType     ItemServingType // Denormalized
  quantity        Int
  priceAtPurchase Float           // Price of one unit of this item at the time of purchase
  customization   String?         // e.g., "extra_sweet", "no_ice" (can be JSON string for complex options)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model AdminUser {
  id                  String    @id @default(cuid())
  email               String    @unique
  passwordHash        String
  role                AdminRole
  ordersTaken         Order[]   @relation("TakenByOrders")
  ordersProcessed     Order[]   @relation("ProcessedByOrders")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model ExperienceRating {
  id        String   @id @default(cuid())
  orderId   String   @unique // One overall rating per order
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
}

model ProductRating {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productName String   // Denormalized product name at time of rating
  rating      Int // 1-5
  comment     String?
  createdAt   DateTime @default(now())

  @@unique([orderId, productId]) // A user can rate a specific product within an order only once
}

enum ItemCategory {
  COFFEE
  SHAKES
}

enum ItemServingType {
  Cone
  Cup
}

enum PaymentMethod {
  Cash
  UPI
  Razorpay
}

enum OrderStatus {
  AWAITING_PAYMENT_CONFIRMATION
  PENDING_PREPARATION
  PREPARING
  READY_FOR_PICKUP
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderSource {
  CUSTOMER_ONLINE
  STAFF_MANUAL
}

enum AdminRole {
  MANUAL_ORDER_TAKER
  ORDER_PROCESSOR
  BUSINESS_MANAGER
}

// Note: CustomizationType is used in app logic (src/types) but not directly as a Prisma enum here.
// It's stored as a String in OrderItem.customization.
