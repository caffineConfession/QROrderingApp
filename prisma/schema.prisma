datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["connectionPooling"]
}

model AdminUser {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String // In a real app, this should be a hashed password
  role      AdminRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  processedOrders Order[] @relation("ProcessedOrders")
  takenOrders     Order[] @relation("TakenOrders")
}

enum AdminRole {
  MANUAL_ORDER_TAKER
  ORDER_PROCESSOR
  BUSINESS_MANAGER
}

model Product {
  id          String   @id @default(uuid())
  name        String // e.g., Vanilla Coffee, Chocolate Shake
  category    String // e.g., COFFEE, SHAKE from your MENU_CATEGORIES
  servingType String // e.g., Cone, Cup
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relation to OrderItem
  orderItems OrderItem[]
}

model Order {
  id            String      @id @default(uuid())
  customerName  String
  customerPhone String
  customerEmail String
  totalAmount   Float
  paymentMethod String // e.g., Cash, Razorpay
  orderStatus   OrderStatus @default(PENDING) // PENDING, RECEIVED, PREPARING, READY_FOR_PICKUP, COMPLETED, CANCELLED
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  items         OrderItem[]

  processedBy   AdminUser?   @relation("ProcessedOrders", fields: [processedById], references: [id])
  processedById String?
  takenBy       AdminUser?   @relation("TakenOrders", fields: [takenById], references: [id])
  takenById     String?
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float // Price at the time of order for this item (quantity * product.price)
  createdAt DateTime @default(now())

  @@unique([orderId, productId]) // Ensure a product appears only once per order, quantity handles multiples
}

enum OrderStatus {
  PENDING          // Order placed by customer, not yet seen by admin
  RECEIVED         // Order acknowledged by admin (e.g., Order Processor)
  PREPARING        // Order is being made
  READY_FOR_PICKUP // Order is ready for the customer
  COMPLETED        // Order picked up and paid (if applicable)
  CANCELLED        // Order cancelled
}
