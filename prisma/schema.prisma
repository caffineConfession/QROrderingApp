
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model AdminUser {
  id              String        @id @default(cuid())
  email           String        @unique
  passwordHash    String // In a real app, this would be a hash
  role            AdminRole
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  processedOrders Order[]       @relation("ProcessedOrders")
  takenOrders     Order[]       @relation("TakenOrders")
}

model Product {
  id            String       @id @default(cuid())
  name          String
  category      ItemCategory // COFFEE, SHAKES
  imageHint     String?
  pricesJson    Json // Store prices as JSON: { "Cone": 130, "Cup": 150 }
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orderItems    OrderItem[]  @relation("ProductOrderItems")
  menuItems     MenuItem[]   @relation("ProductMenuItems") // Added missing back-relation
}

// This model might be redundant if Product serves as the single source of truth for menu items.
// If MenuItem is purely for a different UI representation or some denormalization, it might be kept.
model MenuItem { // For UI representation, linking to a Product
  id          String    @id @default(cuid())
  product     Product   @relation("ProductMenuItems", fields: [productId], references: [id])
  productId   String
  // servingType ItemServingType // Should be part of Product or OrderItem, not MenuItem representation
  // price       Float           // Should be part of Product or OrderItem
}

model Order {
  id                            String        @id @default(cuid())
  customerName                  String?
  customerPhone                 String?
  customerEmail                 String?
  totalAmount                   Float
  paymentMethod                 PaymentMethod
  paymentStatus                 PaymentStatus @default(PENDING)
  status                        OrderStatus   @default(PENDING_PREPARATION) // Default for new paid/confirmed orders
  orderSource                   OrderSource   @default(CUSTOMER_ONLINE)
  createdAt                     DateTime      @default(now())
  updatedAt                     DateTime      @updatedAt
  items                         OrderItem[]
  processedBy                   AdminUser?    @relation("ProcessedOrders", fields: [processedById], references: [id])
  processedById                 String?
  takenBy                       AdminUser?    @relation("TakenOrders", fields: [takenById], references: [id])
  takenById     String?       // Admin who took a manual order or confirmed cash for online
}

model OrderItem {
  id              String            @id @default(cuid())
  order           Order             @relation(fields: [orderId], references: [id])
  orderId         String
  product         Product           @relation("ProductOrderItems", fields: [productId], references: [id])
  productId       String            // Links to the actual product
  productName     String            // Denormalized product name at time of order
  category        ItemCategory      // Denormalized category at time of order
  servingType     ItemServingType
  quantity        Int
  priceAtPurchase Float             // Price per unit at time of purchase
  customization   CustomizationType @default(normal)
}

enum AdminRole {
  MANUAL_ORDER_TAKER
  ORDER_PROCESSOR
  BUSINESS_MANAGER
}

enum ItemCategory {
  COFFEE
  SHAKES
}

enum ItemServingType {
  Cone
  Cup
}

enum CustomizationType {
  normal
  sweet
  bitter
}

enum PaymentMethod {
  Cash
  UPI
  Razorpay
}

enum OrderStatus {
  AWAITING_PAYMENT_CONFIRMATION // Customer online cash order before payment confirmed by staff
  PENDING_PREPARATION           // Payment confirmed, ready for kitchen
  PREPARING                     // Kitchen is making the order
  READY_FOR_PICKUP              // Order is made, customer can collect
  COMPLETED                     // Order collected/delivered
  CANCELLED                     // Order cancelled
}

enum PaymentStatus {
  PENDING  // Payment initiated but not confirmed
  PAID     // Payment successfully confirmed
  FAILED   // Payment attempt failed
  REFUNDED // Payment was refunded
}

enum OrderSource {
  CUSTOMER_ONLINE // Order placed by customer via the app/website
  STAFF_MANUAL    // Order placed manually by staff
}
