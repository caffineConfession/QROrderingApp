// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model AdminUser {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  role          AdminRole
  ordersTaken   Order[]   @relation("TakenBy")
  ordersProcessed Order[] @relation("ProcessedBy")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id            String          @id @default(cuid())
  name          String          @unique // Ensuring name is unique as required by seed.ts
  description   String?
  category      ItemCategory
  isAvailable   Boolean         @default(true)
  imageHint     String?
  menuItems     MenuItem[]
  ratings       ProductRating[]
  orderItems    OrderItem[]     @relation("OrderItemProduct")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model MenuItem {
  id            String          @id @default(cuid())
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  servingType   ItemServingType
  price         Float
  stockQuantity Int             @default(0)
  isAvailable   Boolean         @default(true)
  orderItems    OrderItem[]     @relation("OrderItemMenuItem")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([productId, servingType])
  @@index([productId])
}

model Order {
  id                          String            @id @default(cuid())
  customerName                String?
  customerPhone               String?
  customerEmail               String?
  totalAmount                 Float
  items                       OrderItem[]
  paymentMethod               PaymentMethod
  paymentStatus               PaymentStatus     @default(PENDING)
  status                      OrderStatus       @default(AWAITING_PAYMENT_CONFIRMATION)
  orderSource                 OrderSource
  takenBy                     AdminUser?        @relation("TakenBy", fields: [takenById], references: [id])
  takenById                   String?
  processedBy                 AdminUser?        @relation("ProcessedBy", fields: [processedById], references: [id])
  processedById               String?
  gatewayOrderId              String?           @unique // Adding unique constraint as per db push attempt
  gatewayPaymentId            String?           @unique // Adding unique constraint as per db push attempt
  experienceRating            ExperienceRating?
  productRatings              ProductRating[]
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt

  @@index([takenById])
  @@index([processedById])
}

model OrderItem {
  id              String          @id @default(cuid())
  order           Order           @relation(fields: [orderId], references: [id])
  orderId         String
  productId       String
  productName     String          // Denormalized
  category        ItemCategory    // Denormalized
  servingType     ItemServingType // Denormalized
  menuItemId      String?         // Optional: ID of the specific MenuItem
  product         Product?        @relation("OrderItemProduct", fields: [productId], references: [id], onDelete: Restrict)
  menuItem        MenuItem?       @relation("OrderItemMenuItem", fields: [menuItemId], references: [id], onDelete: Restrict)
  quantity        Int
  priceAtPurchase Float
  customization   String?

  @@index([orderId])
  @@index([productId])
  @@index([menuItemId])
}

model ExperienceRating {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model ProductRating {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  productName String   // Denormalized
  rating      Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}

enum AdminRole {
  MANUAL_ORDER_TAKER
  ORDER_PROCESSOR
  BUSINESS_MANAGER
}

enum ItemCategory {
  COFFEE
  SHAKES
}

enum ItemServingType {
  Cone
  Cup
}

enum PaymentMethod {
  Cash
  UPI
  Razorpay
}

enum OrderStatus {
  AWAITING_PAYMENT_CONFIRMATION
  PENDING_PREPARATION
  PREPARING
  READY_FOR_PICKUP
  COMPLETED
  CANCELLED
  // PENDING and RECEIVED are removed based on previous 'db push' output
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderSource {
  CUSTOMER_ONLINE
  STAFF_MANUAL
}
