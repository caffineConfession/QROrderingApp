
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AdminRole {
  MANUAL_ORDER_TAKER
  ORDER_PROCESSOR
  BUSINESS_MANAGER
}

enum ItemCategory {
  COFFEE
  SHAKES
}

enum ItemServingType {
  Cone
  Cup
}

enum CustomizationType {
  normal
  sweet
  bitter
}

enum PaymentMethod {
  Cash
  UPI
  Razorpay
}

enum OrderStatus {
  AWAITING_PAYMENT_CONFIRMATION
  PENDING_PREPARATION
  PREPARING
  READY_FOR_PICKUP
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderSource {
  CUSTOMER_ONLINE
  STAFF_MANUAL
}

// Models
model AdminUser {
  id           String    @id @default(cuid()) // Changed to CUID for new users, manual ones might be email for now
  email        String    @unique
  passwordHash String
  role         AdminRole
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  ordersTaken  Order[]   @relation("OrderTakenBy")
  ordersProcessed Order[] @relation("OrderProcessedBy")
}

model Product {
  id            String       @id @default(cuid())
  name          String
  description   String?
  category      ItemCategory
  imageHint     String?
  isAvailable   Boolean      @default(true) // New field
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  menuItems     MenuItem[]   @relation("ProductMenuItems")
  orderItems    OrderItem[]  @relation("ProductOrderItems")
}

model MenuItem {
  id            String          @id @default(cuid())
  product       Product         @relation("ProductMenuItems", fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  servingType   ItemServingType
  price         Float
  isAvailable   Boolean         @default(true) // New field
  stockQuantity Int             @default(0)    // New field
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([productId, servingType]) // Ensure a product can't have the same serving type twice
}

model Order {
  id            String        @id @default(cuid())
  customerName  String?
  customerPhone String?
  customerEmail String?
  totalAmount   Float
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  status        OrderStatus
  orderSource   OrderSource
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  takenBy       AdminUser?    @relation("OrderTakenBy", fields: [takenById], references: [id])
  takenById     String?       // This might store email for existing, or CUID for new
  
  processedBy   AdminUser?    @relation("OrderProcessedBy", fields: [processedById], references: [id])
  processedById String?       // This might store email for existing, or CUID for new

  items         OrderItem[]
}

model OrderItem {
  id              String            @id @default(cuid())
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  product         Product           @relation("ProductOrderItems", fields: [productId], references: [id])
  productId       String
  productName     String // Denormalized for easier display on receipts/order summaries
  category        ItemCategory // Denormalized
  servingType     ItemServingType
  quantity        Int
  priceAtPurchase Float
  customization   CustomizationType @default(normal)
}
